// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocked

import (
	"github.com/stretchr/testify/mock"

	"github.com/ViniciusCrisol/where-should-i-go-surfing/pkg/entity"
)

// UserDAO is an autogenerated mock type for the UserDAO type
type UserDAO struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: email
func (_m *UserDAO) FindByEmail(email string) (entity.User, bool, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 entity.User
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (entity.User, bool, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) entity.User); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(email)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Save provides a mock function with given fields: user
func (_m *UserDAO) Save(user entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserDAO creates a new instance of UserDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserDAO(
	t interface {
		mock.TestingT
		Cleanup(func())
	},
) *UserDAO {
	mock := &UserDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
